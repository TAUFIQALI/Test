  import {
    Box,
    Chip,
    CircularProgress,
    Drawer,
    IconButton,
    makeStyles,
    styled,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TablePagination,
    TableRow,
    Typography,
  } from "@material-ui/core";
  import React, { useEffect, useState,useRef } from "react";

  import CloseIcon from "@material-ui/icons/Close";
  import { CustomButton } from "../productService/content/productBody/CustomButton";
  import EmailExportModal from "../common/EmailExportModal";
  import { productSalesContact } from "../../../api/productsApi";
  import EmptyProductSalesDrawer from "./EmptyProductSalesDrawer";
  import ProductSalesDrawerSkeleton from "./ProductSalesDrawerSkeleton";
  import moment from "moment";
  import PrintButton from "../common/PrintButton";
  import DownloadPdfButton from "../common/DownloadPdfButton";
  

  const useStyles = makeStyles({

    root: {
      width: '100%',
    },
    container: {
      maxHeight: '83vh',
      "&::-webkit-scrollbar": {
        width: "6px",
      },
      "&::-webkit-scrollbar-track": {
        borderRadius: "10px",
        backgroundColor: "#2c3e50",
      },
      "&::-webkit-scrollbar-thumb": {
        backgroundColor: "#346fef",
        borderRadius: "10px",
      },
    },
    tableHead: {
      fontWeight: 600,
      fontSize: "16px",
      color: "white",
      backgroundColor: "#346FEF",

    },
  });


  const StyledDrawer = styled(Drawer)(({ theme }) => ({
    "& .drawerWrapper": {
      width: 900,

      "& .drawerHeader": {
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        padding: 16,
      },
      "& .drawerHeaderActions": {
        display: "flex",
        alignItems: "center",
        gap: 16,
      },

      "& .drawerBody": {
        padding: 16,
      },

      "& .tableWrapper": {
        "& .MuiTableHead-root": {
          color: "white",
          backgroundColor: "#e9e9e9",
          fontWeight: 600,

          "& .MuiTableCell-head": {
            fontWeight: 600,
          },
        },
      },

      "& .valueChip": {
        color: '#346fef', backgroundColor: 'rgba(52, 111, 239, 0.05)', fontWeight: 600
      }

    },
  }));


  const ProductSalesDrawer = ({ open, onClose, item, teamUsers }) => {
    const [modalOpen, setModalOpen] = useState(false);
    const classes = useStyles();
    const [salesContact, setSalesContact] = useState([]);
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(10);
    const [total, setTotal] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [teamUserObject, setTeamUserObject] = useState([]);
    const contentRef = useRef(null);

    useEffect(() => {
      let length = teamUsers.length;

      let tmp = [];
      for (let i = 0; i < length; i++) {
        tmp[teamUsers[i].id] = teamUsers[i].full_name;
      }
      setTeamUserObject(tmp);
    }, [])



    useEffect(() => {
      handleProductSalesContact().then();
    }, [page, rowsPerPage]);

    const handleChangePage = (event, newPage) => {
      setPage(newPage);
    };

    const handleChangeRowsPerPage = (event) => {
      setRowsPerPage(+event.target.value);
      setPage(0);
    };


    const handleOpenModal = () => {
      setModalOpen(true);
    };

    const handleCloseModal = () => {
      setModalOpen(false);
    };

    const handleProductSalesContact = async () => {

      const submitData = {
        userProductId: item?.userProductId,
        page: page + 1,
        perPage: rowsPerPage,
      };

      try {
        setIsLoading(true);
        const response = await productSalesContact(submitData);
        if (response.success) {
          setSalesContact(response.data);
          setTotal(response.totalCount);
        } else {
          setSalesContact([]);
        }
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setIsLoading(false);
      }
    };

    const generateContact = (firstName, lastName, email) => {
      if (firstName && lastName) {
        return `${firstName} ${lastName}`;
      } else if (firstName && !lastName) {
        return firstName;
      } else if (!firstName && lastName) {
        return lastName;
      } else if (email) {
        return email;
      }
      else {
        return 'N/A';
      }
    };

    const handleDate = (date) => {
      if (date) {
        return moment(date).format("YYYY-MM-DD");
      }
      return '';
    };

    return (
      <StyledDrawer anchor={"right"} open={open} onClose={onClose}>
        <div className="drawerWrapper" >
          <div className="drawerHeader" >
            <Typography variant="h5" style={{marginLeft:"12px"}}>{item?.userProductTitle}</Typography>

            <div className="drawerHeaderActions">
              {/* <CustomButton
                variant="contained"
                startIcon={<GetAppIcon />}
                disableElevation
                size="small"
                  style={{ fontSize: "14px", textTransform: "capitalize" }}
                  onClick={handleOpenModal}
                            
              >
                Export
              </CustomButton>
                  <EmailExportModal
                      open={modalOpen}
                      handleClose={handleCloseModal}
                  /> */}
                <PrintButton contentRef={contentRef} />

                <DownloadPdfButton targetRef={contentRef} fileName={`transaction_${item?.userProductId}.pdf`} /> 
                
               <IconButton size="small" onClick={onClose}>
                <CloseIcon />
               </IconButton>
            </div>
          </div>

          <div className="drawerBody" ref={contentRef}>
            {isLoading ? <ProductSalesDrawerSkeleton /> :
              (salesContact && !salesContact[0] && !isLoading) ?
                <EmptyProductSalesDrawer />
                :
                <div className={classes.root} >
                  <TableContainer className={classes.container}>
                    <Table stickyHeader className="tableWrapper" aria-label="simple table">
                      <TableHead>
                        <TableRow>
                          <TableCell className={classes.tableHead}>Sold Date</TableCell>
                          <TableCell className={classes.tableHead}>Contact</TableCell>
                          <TableCell className={classes.tableHead}>User</TableCell>
                          <TableCell className={classes.tableHead}>Lead Source</TableCell>
                          <TableCell className={classes.tableHead}>Value</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {salesContact.map((team, index) => (
                          <TableRow key={index}>
                            <TableCell>{handleDate(team.dealClosedDate)}</TableCell>
                            <TableCell>
                              <a href={`/contacts/${team.contactId}`} target="_blank" rel="noopener noreferrer" style={{ textDecoration: 'none', color: '#316AFF', fontWeight: 'bold' }}>
                                {generateContact(team.firstName, team.lastName, team.email)}
                              </a>
                            </TableCell>
                            <TableCell>{team.dealClosedBy ? teamUserObject[team.dealClosedBy] ? teamUserObject[team.dealClosedBy] : '' : ''}</TableCell>
                            <TableCell>{team.sourceTitle || 'Single'}</TableCell>
                            <TableCell>
                              {team.dealProductValue ? (
                                <Chip
                                  size="small"
                                  label={`$${team.dealProductValue}`}
                                  clickable
                                  color="primary"
                                  className="valueChip"
                                />
                              ) : ''
                              }
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>

                  <TablePagination
                    rowsPerPageOptions={[10, 25, 50]}
                    component="div"
                    count={total}
                    rowsPerPage={rowsPerPage}
                    page={page}
                    onPageChange={handleChangePage}
                    onRowsPerPageChange={handleChangeRowsPerPage}
                  />
                </div>
            }
          </div>
        </div>
      </StyledDrawer>
    );
  };

  export default ProductSalesDrawer;
