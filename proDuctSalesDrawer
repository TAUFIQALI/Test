import {
  Box,
  Chip,
  CircularProgress,
  Drawer,
  IconButton,
  makeStyles,
  styled,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TablePagination,
  TableRow,
  Typography,
} from "@material-ui/core";
import React, { useEffect, useRef, useState } from "react";

import CloseIcon from "@material-ui/icons/Close";
import GetAppIcon from "@material-ui/icons/GetApp";
import { CustomButton } from "../productService/content/productBody/CustomButton";
import EmailExportModal from "../common/EmailExportModal";
import { productSalesContact } from "../../../api/productsApi";
import EmptyProductSalesDrawer from "./EmptyProductSalesDrawer";
import ProductSalesDrawerSkeleton from "./ProductSalesDrawerSkeleton";
import moment from "moment";
import { Close } from "@material-ui/icons";
import Utils from "../../../helpers/Utils";
import { USER_SELECTOR } from "../helper/coreConstant";
import ExportDealReportModal from "../common/ExportDealReportModal";
import { userTimeSelectConverter } from "../helper/functions";
import PrintButton from "../common/PrintButton";

const useStyles = makeStyles({

  root: {
    width: '100%',
  },
  container: {
    maxHeight: '78vh',
    "&::-webkit-scrollbar": {
      width: "6px",
    },
    "&::-webkit-scrollbar-track": {
      borderRadius: "10px",
      backgroundColor: "#2c3e50",
    },
    "&::-webkit-scrollbar-thumb": {
      backgroundColor: "#346fef",
      borderRadius: "10px",
    },
  },
  tableHead: {
    fontWeight: 600,
    fontSize: "16px",
    color: "white",
    backgroundColor: "#346FEF",

  },
});


const StyledDrawer = styled(Drawer)(({ theme }) => ({
  "& .drawerWrapper": {
    width: 1000,

    "& .drawerHeader": {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      padding: 16,
      backgroundColor:"#346FEF",
    },
    "& .drawerHeaderActions": {
      display: "flex",
      alignItems: "center",
      gap: 16,
    },

    "& .drawerBody": {
       paddingLeft: 16,
    },

    "& .tableWrapper": {
      "& .MuiTableHead-root": {
        color: "white",
        backgroundColor: "#fff",
        fontWeight: "bold",

        "& .MuiTableCell-head": {
          fontWeight: "bold",
          fontSize:'16px',
        },
      },
    },

    "& .valueChip": {
      color: '#346fef', backgroundColor: 'rgba(52, 111, 239, 0.05)', fontWeight: 600
    },
    "& .closeButton" : {
        width:'25px',
        height:'25px',
        borderRadius:'50%',
        display:"flex",
        justifyContent:"center",
        alignItems:"center",
        backgroundColor:"#FF264A",
        cursor:'pointer'
    }

  },
}));


const ProductSalesDrawer = ({ open, onClose, item, teamUsers,formData,selectedUserIds }) => {
  const [openExportModal, setOpenExportModal] = useState(false);
  const classes = useStyles();
  const [salesContact, setSalesContact] = useState([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(100);
  const [total, setTotal] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [teamUserObject, setTeamUserObject] = useState([]);
  const contentRef = useRef(null);

  useEffect(() => {
    let length = teamUsers.length;

    let tmp = [];
    for (let i = 0; i < length; i++) {
      tmp[teamUsers[i].id] = teamUsers[i].full_name;
    }
    setTeamUserObject(tmp);
  }, [])



  useEffect(() => {
    handleProductSalesContact().then();
  }, [page, rowsPerPage]);

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };


  const handleOpenModal = () => {
    setOpenExportModal(true);
  };

  const handleCloseModal = () => {
    setOpenExportModal(false);
  };

  const handleProductSalesContact = async () => {

    const submitData = {
      userProductId: item?.userProductId,
      page: page + 1,
      perPage: rowsPerPage,
      userIds: formData.dealClosedByIds,
      dealCloseStartDate: formData.dealCloseStartDate ? userTimeSelectConverter(formData.dealCloseStartDate) : null,
      dealCloseEndDate: formData.dealCloseEndDate ? userTimeSelectConverter(formData.dealCloseEndDate) : null,
    };
    
    if (selectedUserIds[0] === USER_SELECTOR.ALL){
      submitData.userIds = teamUsers.map((team)=>(team.id));
    }

    try {
      setIsLoading(true);
      const response = await productSalesContact(submitData);
      if (response.success) {
        setSalesContact(response.data);
        setTotal(response.totalCount);
      } else {
        setSalesContact([]);
      }
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const generateContact = (firstName, lastName, email) => {
    if (firstName && lastName) {
      return `${firstName} ${lastName}`;
    } else if (firstName && !lastName) {
      return firstName;
    } else if (!firstName && lastName) {
      return lastName;
    } else if (email) {
      return email;
    }
    else {
      return 'N/A';
    }
  };

  const handleDate = (date) => {
    if (date) {
      return window.globalTimezoneConversionToDifferentTimezone(date,"UTC",'', "MMM D, YYYY ");
    }
    return '';
  };

  return (
    <StyledDrawer anchor={"right"} open={open} onClose={onClose}>
      <div className="drawerWrapper">
        <div className="drawerHeader">
          <Typography  style={{color:"#fff", fontSize:'24px', fontWeight:'600'}} variant="h5">{item?.userProductTitle}</Typography>

          <div className="drawerHeaderActions">
         <CustomButton
              variant="contained"
              startIcon={<GetAppIcon />}
              disableElevation
              size="small"
                style={{ fontSize: "14px", 
                         textTransform: "capitalize",
                         border: "2px solid white",
                         padding:"2px 6px",
                         borderRadius:"4px",
                         
                        }}
                onClick={handleOpenModal}
                          
            >
              Export
            </CustomButton>
          { 
          ( Utils.getAccountData("userId") === 2 ||  
           Utils.getAccountData("userId") === 446) &&  
           (<PrintButton contentRef={contentRef} />)
          }

              <Box onClick={onClose} className="closeButton" >
                <Close style={{color:'white'}} />
              </Box>
          </div>
        </div>
        {openExportModal &&
          <ExportDealReportModal
            selectedUserIds={selectedUserIds}
            userProductId={item.userProductId}
            open={openExportModal}
            onClose={handleCloseModal}
            teamUsers={teamUsers}
          />
        }
        <div style={{
        height: 'calc(100vh - 133px)'
       }} className="drawerBody">
          {isLoading ? <ProductSalesDrawerSkeleton /> :
            (salesContact && !salesContact[0] && !isLoading) ?
              <EmptyProductSalesDrawer />
              :
              <div className={classes.root} >
                <TableContainer className={classes.container}>
                  <Table stickyHeader className="tableWrapper" aria-label="simple table"ref={contentRef}>
                    <TableHead>
                      <TableRow>
                        <TableCell >Date Closed</TableCell>
                        <TableCell >Contact</TableCell>
                        <TableCell>Company</TableCell>
                        <TableCell >Lead Source</TableCell>
                        <TableCell style={{textAlign:'center'}}>User</TableCell>
                        <TableCell >Deal Value</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {salesContact.map((team, index) => (
                        <TableRow key={index}>
                          <TableCell>{handleDate(team.dealClosedDate)}</TableCell>
                          <TableCell>
                            <a href={`/contacts/${team.contactId}`} target="_blank" rel="noopener noreferrer" style={{ textDecoration: 'none', color: '#316AFF', fontWeight: 'bold' }}>
                              {generateContact(team.firstName, team.lastName, team.email)}
                            </a>
                          </TableCell>
                          <TableCell>{team.companyName || ''}</TableCell>
                          <TableCell>{team.sourceTitle || 'Single'}</TableCell>
                          <TableCell style={{textAlign:'center'}}>{team.dealClosedBy ? teamUserObject[team.dealClosedBy] ? teamUserObject[team.dealClosedBy] : '' : ''}

                          </TableCell>
                         
                          <TableCell>
                            {team.dealProductValue ? (
                              <Chip
                                size="small"
                                label={Utils.formatCurrency(team.dealProductValue, "$")}
                                clickable
                                color="primary"
                                className="valueChip"
                              />
                            ) : ''
                            }
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>

                <TablePagination
                  rowsPerPageOptions={[25, 50,100]}
                  component="div"
                  count={total}
                  rowsPerPage={rowsPerPage}
                  page={page}
                  onPageChange={handleChangePage}
                  onRowsPerPageChange={handleChangeRowsPerPage}
                />
              </div>
          }
        </div>
        <div style={{display:'flex', justifyContent:'space-between', alignItems:'center',color:'white', backgroundColor:'#133159',padding:'16px'}}>
          
          <span style={{color:'white', fontSize:'24px', fontWeight:'600'}}>Total Deal Value:</span>

          <span style={{color:'white', fontSize:'24px', fontWeight:'600',marginRight:'50px'}}>{Utils.formatCurrency(item.totalSoldProductValue, "$")}</span>
      </div>
      </div>
    </StyledDrawer>
  );
};

export default ProductSalesDrawer;
